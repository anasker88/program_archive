問1
出力例:

tohta_abe@ispcJPH245YLSV:~/program/fljikken/toi1$ ./main.exe
# fun x -> x + 1;;
- : (int -> int) = <fun>
# fun f -> f 3 + f 5;;
- : ((int -> int) -> int) = <fun>
# fun f -> fun g -> fun x -> f (g x);;
- : (('a8 -> 'a9) -> (('a7 -> 'a8) -> ('a7 -> 'a9))) = <fun>
# fun x -> fun y -> fun z -> x z (y z);;
- : (('a12 -> ('a14 -> 'a15)) -> (('a12 -> 'a14) -> ('a12 -> 'a15))) = <fun>
# 3 + true;;
Fatal error: exception ConstraintSolver.TyError
# if 42 then 1 else 2;;
Fatal error: exception ConstraintSolver.TyError
# fun x -> if x then x else 1;;
Fatal error: exception ConstraintSolver.TyError
# 5 (fun x -> x );;
Fatal error: exception ConstraintSolver.TyError

考察:
eval.mlにならってtype.mlを作成した。
型環境tyenvにおいては変数名とその変数の型の組がリストとして登録されており、変数定義のたびにinfer_cmdによりtyenvに新たな組が加えられる。
infer_exprでは現在の型環境に応じて制約や表現の型が生成される。ここでいう制約とは表現内の引数の型にかかる制限のことであり、例えばEAdd(a,b)に対して引数a,bの型はINTに制限される。
この制約の生成および表現の型の定義の法則性はおおむねスライドに従って実装した。
こうして生成された制約をもとにinfer_cmdの中で型解析(制約のsubstおよびそれに基づく型のunify)が行われ、式の型が解析される。こうして型がうまく解析されたときにのみ、eval_commandが実行され、この時に初めて式の値が評価されることになる。
1+trueのような矛盾する制約を生成する正しくない式を受け取った際は、infer_cmd内の型解析の段階でエラーとなるので、型が無効な式の値の評価が行われることはない。

発展1
ocamlにおいて副作用が目的となる関数はboolのような型を持たず、unitを返すようになっている。print_newlineなど、画面に出力する関数がその一例である。
c言語のような手続き型言語においてはそのような関数は実行の結果(特にエラーなど)に応じて返り値を返すようになっており、それに応じてエラー処理を設定することが可能であるので、ocamlにおいてもそのような式の値の定義の仕方がされてもよさそうなものである。すなわち、成功時にはtrueを、失敗時にfalseを返すようになっていてもよさそうに思える。
ocamlでそういった式がunitを返すのは一つにはunit型の関数は;区切りで連続実行できるようにしているため、便利であるからだと思われる。
ではなぜそもそもそういった実行の仕方がunit型に制限されているかというと、ocamlのような関数が多言語では式の値がかなり大きな意味を持つからだと考えられる。;区切りで普通の関数を連続実行できるようにした場合、途中の関数の値を無視することになるが、関数型言語では関数は値を計算するために用いるものであるので、それを無視するような処理は関数型言語の本質に矛盾する。
こういった理由から、副作用が目的となる関数はunit型の値しかとらず、エラー処理は呼び出される関数内で行われるような仕組みになっているものと思われる。。