問1
出力例:
?- ['toi1.pl'].
true.

?- bloodrelative(kobo,miho).
true .

?- bloodrelative(kobo,iwao).
true .

?- bloodrelative(koji,iwao).
false.

考察:
基本的には、血縁関係の定義通り、共通の祖先をもつことをbloodrelativeの条件とすればよい。
ただし、祖先には自分自身は含まれず、また二人のうち一方がもう一方の祖先である場合にはほかの親子関係が与えられなくても二人が血縁関係にあることは確定するので、片方がもう一方の祖先である場合もbloodrelativeとして定義した。

問2
出力例:
?- ['toi2.pl'].
true.

?- mult(s(s(z)),s(s(s(z))),s(s(s(s(s(s(z))))))).
true .

?- mult(s(s(z)),s(s(s(z))),X).
X = s(s(s(s(s(s(z)))))) .

?- mult(s(s(z)),X,s(s(s(s(s(s(z))))))).
X = s(s(z)) ;
false.

?- mult(X,s(s(s(z))),s(s(s(s(s(s(z))))))).
X = s(s(z)) ;
false.

考察:
x*0=0をベースケースとし、x*(y+1)=x+x*yによって再帰的に掛け算関係を定義している。
multではどの要素についても問い合わせを行うことができ、ほかの関数内で用いる際にもあまり繊細な注意を必要としない。

問3:
出力例:
?- ['toi3.pl'].
true.

?- reverse([1,2,3,4,5],X).
X = [5, 4, 3, 2, 1].

?- reverse(X,[1,2,3,4,5]).
X = [5, 4, 3, 2, 1] ;
(ここでフリーズ)

?- concat([[1],[2,3],[4,5]],X).
X = [1, 2, 3, 4, 5].

?- concat([[1],[2,3],[4,5],X],[1,2,3,4,5,6]).
X = [6] ;
false.

?- concat([[1],[2,3],X,[6]],[1,2,3,4,5,6]).
X = [4, 5] ;
false.

?- concat([X,[2,3],[4,5],[6]],[1,2,3,4,5,6]).
X = [1] ;
false.

考察:
reverseでは[]が[]の逆順であることをベースケースとし、reverse(cons(a,rest))=append(reverse(rest),[a])を用いて再帰的にreverseを定義している。
すなわち、先頭要素を除いたリストを逆順とし、その末尾に取り出した先頭要素をくっつけることでリストを逆順にできるのを用いた。
reverseは第二要素についてのみ問い合わせを行うことができる。
concatでは[]のconcatが[]であることをベースケースとし、concat(cons(a,rest))=append(a,concat(rest))であるのを用いて再帰的にconcatを定義している。
すなわち、先頭リストを除いたリストのリストについてconcatし、それの先頭に先頭リストをappendすることで元のリストのリストをconcatできるのを用いた。
concatもいずれの要素についても問い合わせを行うことができる。

問4
実行例:
?- ['toi4.pl'].
true.

?- hamilton([1,2,3,4,5],[[1,2],[3,4],[4,5]]).
false.

?- hamilton([1,2,3,4,5],[[1,2],[3,4],[4,5],X]).
X = [2, 3] .

?- hamilton([1,2,3,4,5],[[1,2],[2,3],[3,4],[2,4],X]).
X = [4, 5] .

?- hamilton([1,2,3,4,5],[[1,2],[2,3],[3,4],[2,4],X]).
X = [4, 5] ;
X = [5, 1] ;
false.

考察:
グラフ(V,E)上でSからTへのハミルトン路があるかを表すmakehamiltonを定義し、これをすべての(S,T)の組について調べることでハミルトン路の検出を行っている。
makehamiltonではSと辺でつながった頂点Xであってグラフ(V/X,E)上でXからTへのハミルトン路が存在するようなものが存在することが必要十分条件であるから、これを用いて再帰的にmakehamiltonを定義した。
ここではハミルトン路の始点と初めの辺を除いた路もまたハミルトン路となることを用いている。
これを実現するため、リストXから一つの要素Aを取り出すpickoneup(A,X)、リストXから一つの要素Aを除いたリストYを生成するremove(A,X,Y)、辺集合Eと二点X,YについてXからYへの辺があるかを表すedge(X,Y,E)をそれぞれ定義している。
hamiltonは辺集合について、加えることでハミルトン路が構成できるような辺を問い合わせることが可能である。